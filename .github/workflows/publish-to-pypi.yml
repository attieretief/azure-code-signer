# .github/workflows/publish-to-pypi.yml
name: Build and Publish to PyPI

on:
  push:
    branches:
      - master

jobs:
  build-and-publish:
    name: Build and Publish Azure Code Signer to PyPI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for version determination
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools bump2version
    
    - name: Determine version bump type
      id: bump-type
      run: |
        # Check commit messages for version bump indicators
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"#major"* ]]; then
          echo "BUMP_TYPE=major" >> $GITHUB_ENV
        elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
          echo "BUMP_TYPE=minor" >> $GITHUB_ENV
        else
          echo "BUMP_TYPE=patch" >> $GITHUB_ENV
        fi
        echo "Determined bump type: ${{ env.BUMP_TYPE }}"
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Bump version
      if: env.BUMP_TYPE != 'none'
      run: |
        # Bump version in pyproject.toml
        bump2version --current-version $(grep -Po '(?<=version = ")[^"]*' pyproject.toml) \
          --new-version $(bump2version --dry-run --list ${{ env.BUMP_TYPE }} $(grep -Po '(?<=version = ")[^"]*' pyproject.toml) | grep new_version | sed -r 's/.*=//') \
          --allow-dirty pyproject.toml
        
        # Store new version for later steps
        echo "VERSION=$(grep -Po '(?<=version = ")[^"]*' pyproject.toml)" >> $GITHUB_ENV
        echo "Bumped version to ${{ env.VERSION }}"
        
        # Commit and push the version bump
        git add pyproject.toml
        git commit -m "Bump version to ${{ env.VERSION }} [skip ci]"
        git push https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:master
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: |
        python -m twine check dist/*
    
    - name: Publish to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        skip-existing: true